(import ../src/text_rendering_ints :prefix "")

(comment
  (def sizes @{84 [8.25 14] 44 [8.25 14] 87 [8.25 14] 189 [8.25 14]
               59 [8.25 14] 137 [8.25 14]
               164 [8.25 14] 99 [8.25 14] 100 [8.25 14] 70 [8.25 14]
               63 [8.25 14] 118 [8.25 14] 163 [8.25 14]
               32 [8.25 14] 141 [8.25 14] 177 [8.25 14] 186 [8.25 14]
               66 [8.25 14] 132 [8.25 14] 113 [8.25 14]
               187 [8.25 14] 148 [8.25 14] 191 [8.25 14] 108 [8.25 14]
               138 [8.25 14] 52 [8.25 14] 101 [8.25 14]
               47 [8.25 14] 50 [8.25 14] 93 [8.25 14] 142 [8.25 14]
               169 [8.25 14] 56 [8.25 14] 81 [8.25 14]
               121 [8.25 14] 140 [8.25 14] 175 [8.25 14] 122 [8.25 14]
               68 [8.25 14] 152 [8.25 14] 128 [8.25 14]
               166 [8.25 14] 116 [8.25 14] 34 [8.25 14] 131 [8.25 14]
               54 [8.25 14] 133 [8.25 14] 42 [8.25 14]
               76 [8.25 14] 35 [8.25 14] 74 [8.25 14] 174 [8.25 14]
               180 [8.25 14] 61 [8.25 14] 123 [8.25 14]
               89 [8.25 14] 78 [8.25 14] 39 [8.25 14] 98 [8.25 14] 126
               [8.25 14] 65 [8.25 14] 55 [8.25 14] 
               195 [8.25 14] 91 [8.25 14] 57 [8.25 14] 62 [8.25 14] 88 [8.25 14]
               125 [8.25 14] 171 [8.25 14]
               10 [0 14] 139 [8.25 14] 173 [8.25 14] 161 [8.25 14] 79 [8.25 14]
               129 [8.25 14] 80 [8.25 14]
               135 [8.25 14] 49 [8.25 14] 157 [8.25 14] 48 [8.25 14]
               150 [8.25 14] 176 [8.25 14] 43 [8.25 14]
               194 [8.25 14] 156 [8.25 14] 46 [8.25 14] 110 [8.25 14]
               53 [8.25 14] 83 [8.25 14] 153 [8.25 14]
               40 [8.25 14] 120 [8.25 14] 147 [8.25 14] 96 [8.25 14]
               134 [8.25 14] 104 [8.25 14] 143 [8.25 14] 
               106 [8.25 14] 103 [8.25 14] 51 [8.25 14] 181 [8.25 14]
               172 [8.25 14] 97 [8.25 14] 155 [8.25 14] 
               109 [8.25 14] 178 [8.25 14] 179 [8.25 14] 190 [8.25 14]
               115 [8.25 14] 136 [8.25 14] 119 [8.25 14]
               162 [8.25 14] 185 [8.25 14] 72 [8.25 14] 94 [8.25 14]
               168 [8.25 14] 184 [8.25 14] 151 [8.25 14] 
               170 [8.25 14] 154 [8.25 14] 117 [8.25 14] 41 [8.25 14]
               188 [8.25 14] 64 [8.25 14] 67 [8.25 14]
               73 [8.25 14] 124 [8.25 14] 95 [8.25 14] 75 [8.25 14]
               159 [8.25 14] 111 [8.25 14] 45 [8.25 14]
               112 [8.25 14] 85 [8.25 14] 114 [8.25 14] 158 [8.25 14]
               167 [8.25 14] 165 [8.25 14] 146 [8.25 14]
               107 [8.25 14] 149 [8.25 14] 77 [8.25 14] 71 [8.25 14]
               160 [8.25 14] 182 [8.25 14] 86 [8.25 14]
               105 [8.25 14] 33 [8.25 14] 102 [8.25 14] 144 [8.25 14]
               36 [8.25 14] 90 [8.25 14] 69 [8.25 14] 
               38 [8.25 14] 145 [8.25 14] 37 [8.25 14] 130 [8.25 14]
               183 [8.25 14] 60 [8.25 14] 58 [8.25 14]
               82 [8.25 14]})
  
  ## find the first split
  (let [word "01234567890"
        max-width 40
        start 0
        stop  (length word)]
    (index-passing-max-width sizes
                             word
                             start
                             stop
                             max-width))
  #=> 4
  
  ## find all places the word should be split
  (let [word "01234567890"
        max-width 40
        stop (length word)]
    (var start 0)
    (seq [_ :iterate true
          :while (set start (index-passing-max-width sizes
                                                     word
                                                     start
                                                     stop
                                                     max-width))]
      start))
  #=> @[4 8]

  ## see how the word will look when split
  (let [word "01234567890"
        max-width 40
        stop (length word)]
    (var start 0)
    (var last 0)
    (def breaks (seq [_ :iterate true
                      :while (set start (index-passing-max-width sizes
                                                                 word
                                                                 start
                                                                 stop
                                                                 max-width))
                      :let [pair [last start]]]
                  (set last start)
                  pair))
    (->> (array/push breaks [last stop])
         (map (fn [[start stop]] (string/slice word start stop)))))
  #=> @["0123" "4567" "890"]
  )
